#!/usr/bin/env bash

# Install the PaperCut Release Client on a Raspberry Pi Computer.
# Copyright PaperCut software 2016 under the terms of the GNU Open Source
# License Version 3.

# Some information and techniques taken from
#   https://github.com/RPi-Distro/raspi-config
#   https://github.com/alecthegeek/CCHS_Raspian_for_IoT/

# This script may be run as often as needed.

_FREESPACEWANTED=500 # MByte of free space required to install
FREESPACEWANTED=$_FREESPACEWANTED
_PART_SIZE='+3.5G' # Used by fdisk, root  partition size

UPGRADE=""  # Default to full install

LOCALE_NEXT_BOOT=""   # Don't force locale at next boot since this script handles locale

SERVER_PORT=9191      # Default secure port
SERVER_IP="Edit Me"   # Prompt System Admin after install
SERVER_NAME="Edit Me" # Prompt System Admin after install
DOWNLOAD_URL=https://www.papercut.com/api/product/ng/latest/linux-x64/

PP_USER="papercut"  # User account to own and run papecut

ask() {
    read -p "$1" -r < /dev/tty
    echo "$REPLY"
}

# This code is adapted from https://github.com/RPi-Distro/raspi-config/blob/master/raspi-config
resize_sd() {

  ROOT_PART=$(mount | sed -n 's|^/dev/\(.*\) on / .*|\1|p')

  PART_NUM=${ROOT_PART#mmcblk0p}
  if [ "$PART_NUM" = "$ROOT_PART" ]; then
      whiptail --msgbox "$ROOT_PART is not an SD card. Don't know how to expand" 20 60 2
      return 0
  fi

# NOTE: the NOOBS partition layout confuses parted. For now, let's only
# agree to work with a sufficiently simple partition layout
  if [ "$PART_NUM" -ne 2 ]; then
    whiptail --msgbox "Your partition layout is not currently supported by this tool. You are probably using NOOBS, in which case your root filesystem is already expanded anyway." 20 60 2
    return 0
  fi

  LAST_PART_NUM=$(parted /dev/mmcblk0 -ms unit s p | tail -n 1 | cut -f 1 -d:)
  if [ $LAST_PART_NUM -ne $PART_NUM ]; then
    whiptail --msgbox "$ROOT_PART is not the last partition. Don't know how to expand" 20 60 2
    return 0
  fi

# Get the starting offset of the root partition
  PART_START=$(sudo parted /dev/mmcblk0 -ms unit s p | grep "^${PART_NUM}" | cut -f 2 -d: | sed 's/[^0-9]//g')
  [ "$PART_START" ] || return 1
# Return value will likely be error for fdisk as it fails to reload the
# partition table because the root fs is mounted
  sudo fdisk /dev/mmcblk0 <<EOF
p
d
$PART_NUM
n
p
$PART_NUM
$PART_START
$_PART_SIZE
p
w
EOF


# now set up an init.d script
cat <<EOF | sudo tee > /dev/null  /etc/init.d/resize2fs_once &&
#!/bin/sh
### BEGIN INIT INFO
# Provides:          resize2fs_once
# Required-Start:
# Required-Stop:
# Default-Start: 3
# Default-Stop:
# Short-Description: Resize the root filesystem to fill partition
# Description:
### END INIT INFO
. /lib/lsb/init-functions
case "\$1" in
  start)
    log_daemon_msg "Starting resize2fs_once" &&
    resize2fs /dev/$ROOT_PART &&
    update-rc.d resize2fs_once remove &&
    rm /etc/init.d/resize2fs_once &&
    log_end_msg \$?
    ;;
  *)
    echo "Usage: \$0 start" >&2
    exit 3
    ;;
esac
EOF
sudo chmod +x /etc/init.d/resize2fs_once &&
  sudo update-rc.d resize2fs_once defaults
}

usage() {
    echo "$0" '-i <server-ip> -n <server-name> [-f <installer-file>] [-u]'
    echo '-i PaperCut server IP addresss xxx.xxx.xxx.xxx'
    echo '-n PaperCut server Network IP name e.g. papercut.example.com'
    echo '-f is the name of the PaperCut installer file, If not present the script will attempt to download an installer'
    echo '-u Only upgrade the software'
    echo '-s Skip the check of free disk space. Useful with -u'
    echo '-l Force Locale Settings at the Next Boot. Useful for preparing image or install to be used by others.'
    echo '-h Print this help text'
    exit
}

do_wifi_country() { # Adapted from raspi-config script
  oIFS="$IFS"

  IFS="/"
  value=$(tail -n +26 /usr/share/zoneinfo/iso3166.tab | tr '\t' '/' | tr '\n' '/')
  COUNTRY=$(whiptail --menu "Select the country in which the Pi is to be used" 20 60 10 ${value} 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ];then
    if [ -e /etc/wpa_supplicant/wpa_supplicant.conf ]; then
        if sudo grep -q "^country=" /etc/wpa_supplicant/wpa_supplicant.conf ; then
            sudo sed -i -e "s/^country=.*/country=$COUNTRY/g" /etc/wpa_supplicant/wpa_supplicant.conf
        else
            sudo sed -i -e "1i country=$COUNTRY" /etc/wpa_supplicant/wpa_supplicant.conf
        fi
    else
        echo "country=$COUNTRY" | sudo tee  /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null
    fi
    whiptail --msgbox "Wi-fi country set to $COUNTRY" 20 60 1
  else
      echo Error selecting wifi country code
  fi
  IFS=$oIFS
}

# Main
while getopts :i:n:p:f:l:uh FLAG ; do
    case $FLAG in

    h) usage
      ;;

    u) UPGRADE=YES
      ;;

    l) LOCALE_NEXT_BOOT=YES
      ;;

    s) FREESPACEWANTED=""
      ;;

    i) SERVER_IP=$OPTARG
      ;;

    n) SERVER_NAME=$OPTARG
      ;;

    p) SERVER_PORT=$OPTARG
      ;;

    f) INSTALLER_FILE=$(cd $(dirname "$OPTARG") ; pwd)/"$OPTARG" # Need full path to installer file
      ;;

    \?) usage
      ;;
    esac
done

# START HERE

if [[ !  -e /etc/issue ]] ||  ! grep "Raspbian" /etc/issue > /dev/null  ; then
    echo Please run this script on Raspian GNU/Linux.
    echo You can download Linux from the Raspberry Pi website at https://www.raspberrypi.org/downloads/raspbian/
    echo 'The Lite version is recommended to save space, but the full version will also work'
    exit
fi


if [[ ! -d "$(eval echo ~$PP_USER)" && -n "$UPGRADE" ]] ; then
  echo User $PP_USER does not exist. Upgrade option is being ignored
  UPGRADE=""
  if [[ -z "$FREESPACEWANTED" ]] ; then
    FREESPACEWANTED=$_FREESPACEWANTED
    echo also checking for $FREESPACEWANTED free disk space.
  fi
fi

if [[ -n "$FREESPACEWANTED" && $(df -m --output=avail / | tail -1) -lt $FREESPACEWANTED ]] ; then
  echo Insufficuent disk space -- Please make sure there is at least $FREESPACEWANTED Mb and run run again
  if [[ $(df -m --output=size / | tail -1) -lt 2800 ]] ; then
    echo N.B. If you have NOT already autosized your image to fit all the space on the SD card
    echo 'I can resize the image for you to 3G which will be enough if you are using Jessie "lite"'
    if [[ $(ask "Do you want to resize the SD card image to 3G?  [N/y]") =~ [Yy] ]] ; then
      resize_sd
      echo The Pi will now reboot emmdialty to complete the resize. Please rerun $0 again
      ask "Press any key to continue"
      sudo init 6
    fi
    echo Note you can manualy resize the SD card from by running the command \"sudo raspi-config\"
  fi
  exit -1
fi

if [[ -z "$INSTALLER_FILE" ]] ; then
  echo About to download the latest PaperCut installer file. This will take some time
  echo
  INSTALLER_FILE=/tmp/installer.sh
  wget $DOWNLOAD_URL  -O $INSTALLER_FILE  --progress=dot:giga
fi

if [[ ! -e "$INSTALLER_FILE" ]] ; then
  echo "Can\'t find installer file $INSTALLER_FILE"
  exit
fi

chmod aog+x "$INSTALLER_FILE"

echo Adding Debian Stretch Backports for Java 11 support
echo

sudo wget https://ftp-master.debian.org/keys/archive-key-8.asc -O /tmp/archive-key-8.asc
sudo apt-key add /tmp/archive-key-8.asc
echo 'deb http://httpredir.debian.org/debian stretch-backports main contrib non-free' | sudo tee -a /etc/apt/sources.list.d/debian-backports.list

echo About to upgrade Raspian to the latest version -- this may take some time
echo

sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y

echo About to install X Windows and the Java runtime if required -- this may take some time
sudo apt-get install -y xorg xinit openjdk-11-jre pwgen matchbox-keyboard
sudo apt-get autoremove
sudo apt-get clean
echo

sudo sed -i -e '/\(trap.*2\)\|\(set.*\+m\)/d' /etc/profile

sudo sed -i -e $'3i\
trap \'\' 2 # Disable ctrl-c control\
set +m      # Disable job control\

' /etc/profile


if [[ -z "$UPGRADE" ]] ; then

  echo About to run various setup  programs. Please configure your locale, keyboard and timezone.
  echo 'NB You will need a physical keyboard attached to the Pi (even if using a remote ssh connection)'
  ask "Press any key to continue"
  echo


  sudo dpkg-reconfigure keyboard-configuration
  sudo dpkg-reconfigure locales
  sudo dpkg-reconfigure tzdata
  do_wifi_country

  PP_PW=$(pwgen -s 18 1)  # Give the new user a secure password that we won't know

  if [[ -d "$(eval echo ~$PP_USER)" ]] ; then
      # User already exists
      sudo killall -u $PP_USER
      sudo userdel -fr $PP_USER
  fi

  PP_HOME=/usr/local/$PP_USER # Papercut software is installed in home dir of PaperCut user
  (echo $PP_PW; echo $PP_PW ) | sudo adduser --gecos "PaperCut Admin User" --home $PP_HOME $PP_USER
  sudo usermod -aG video $PP_USER

  echo
  echo PaperCut application user created with secure password. For security resons you cannot log in as papercut
  echo
else
  sudo killall -u $PP_USER
  PP_HOME="$(eval echo ~$PP_USER)"
  sudo rm -rf "$PP_HOME"/release
fi

echo About to unpack the PaperCut installer. This may take some time
echo
sudo -u $PP_USER "$INSTALLER_FILE" -e -- -C "$PP_HOME/.." --checkpoint=.1000 --exclude papercut/release/runtime papercut/release

if [[ ! -d "$PP_HOME/release" ]] ; then
  echo Failed to unpack the installer. Please download again
  exit -1
fi

find $PP_HOME -name \*.jar.pack -exec sh -c "echo Unpacking \$1 && sudo -u $PP_USER unpack200 \$1 \${1%%.pack}" sh {} \;

sudo -u $PP_USER chmod ugo+x $PP_HOME/release/*.sh

[[ -e  $PP_HOME/release-station.log ]] &&
    sudo rm $PP_HOME/release-station.log

sudo touch  /var/log/release-station.log
sudo ln -s /var/log/release-station.log $PP_HOME/release-station.log
sudo chown $PP_USER:$PP_USER /var/log/release-station.log
sudo chown $PP_USER:$PP_USER $PP_HOME/release-station.log

if [[ -z "$UPGRADE" ]] ; then

  sudo tee  /boot/pc-connection.properties <<EOF
server-ip=$SERVER_IP
server-port=$SERVER_PORT
server-name=$SERVER_NAME
EOF

  sudo mv $PP_HOME/release/config.properties  /boot/pc-config.properties
  # sudo mv $PP_HOME/release/client-machine-aliases.properties /boot/client-machine-aliases.properties
fi


for i in connection.properties config.properties ; do
  [[ -e $PP_HOME/release/$i  ]] && sudo rm $PP_HOME/release/$i
  sudo ln -s /boot/pc-$i $PP_HOME/release/$i
  sudo chown $PP_USER:$PP_USER  $PP_HOME/release/$i
done

# Make Pi boot into user papercut text mode
if  command -v systemctl > /dev/null && systemctl | grep -q '^ *\-\.mount' ; then
    sudo systemctl set-default multi-user.target
    sudo cp  /etc/systemd/system/autologin@.service  /etc/systemd/system/autologin_$PP_USER@.service
    sudo sed -i -e "s/--autologin \+pi/--autologin $PP_USER/"  /etc/systemd/system/autologin_$PP_USER@.service
    [[ -e /etc/systemd/system/getty.target.wants/getty@tty1.service ]] &&
      sudo rm /etc/systemd/system/getty.target.wants/getty@tty1.service
    sudo ln -fs /etc/systemd/system/autologin_$PP_USER@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
else
    echo Upgrade to current version of Debian failed. Can\'t use systemd
    exit -1
fi


# Remove old calls to release station
sudo sed -i -e '/pc-release-linux.sh/d' $PP_HOME/.profile

# Force locale etc setting on 1st boot
if [[ -n $LOCALE_NEXT_BOOT ]] ; then
    sudo touch /boot/prompt4Locale
fi

if ! grep "prompt4Locale" $PP_HOME/.profile ; then

cat <<EOF | sudo tee -a $PP_HOME/.profile

echo -n "Network hostname is "
hostname
echo -n "Network IP addresses are "
hostname -I
echo

read -t 10 -p "Press any key to continue or wait 10 seconds" -n 1 < /dev/tty

if [[ -e /boot/prompt4Locale ]] ; then
    echo
    echo "WARNING:"
    echo "Please set up:"
    echo "locale,"
    echo "      keyboard,"
    echo "      timezone and"
    echo "      WiFi region"
    echo
    echo "You will need the login credentials for the local admin account"
    echo "and connect via ssh to \"\$(hostname)\". You can then run the command"
    echo "\"sudo raspi-config\" and select the \"Internationalisation Options\" menu."
    echo "After completing the configuration process please delete the file"
    echo "/boot/prompt4Locale"
    read -p "Press any key to continue" -n 1 < /dev/tty
fi

EOF

fi

echo 'xinit ~/release/pc-release-linux.sh -- vt$XDG_VTNR ;exit'|sudo tee -a  "$PP_HOME/.profile" > /dev/null

# Finshed set up for Papercut. Now going to add some system mnagement goodness

# Make the pi run file system check/repair on every boot (need to clear out old settings 1st)
sudo sed -i -e 's/ fsck\.\(repair\|mode\)=[^ ]*//g;s/$/ fsck.mode=force fsck.repair=yes/' /boot/cmdline.txt


if [[ $(ask "Do you wish to flip the display 180˚, useful for displays that require specific orientation because of cables etc.?")  =~ [Yy] ]] ; then
  sudo sed -i -e '/lcd_rotate=/d;$a\
    # Added by PaperCut
    lcd_rotate=2' /boot/config.txt
fi


#Disable VT switching
cat <<EOF | sudo tee /usr/share/X11/xorg.conf.d/20-disable-vt-switching.conf > /dev/null
Section "ServerFlags"
    Option "DontVTSwitch" "true"
EndSection
EOF

echo We can put some host setttings in the /boot/machine.local and you can edit them on your laptop as needed

echo
echo Host name management
echo ====================
echo
echo There are three options:
echo "Keep the current hostname \"$(hostname)\""
echo "Change to a fixed hostname of your choosing"
echo "Have the Pi dynamically allocate a a hostname based on the CPU serial number at boot time"
echo
echo

dynhostname=$'rpi$(sed -nre \'/^Serial\t\t: ........(........)$/s//\\1/p\' /proc/cpuinfo)'

select selection in "Keep the current hostname \"$(hostname)\"" \
                    "Provide a new hostname" \
                    "CPU serial number based hostname" ; do
    case "$REPLY" in
        1) newhostname=$(hostname) ; break ;;
        2) newhostname=$(ask "Please provide new hostname ") ; break ;;
        3) newhostname=$'rpi$(sed -nre \'/^Serial\t\t: ........(........)$/s//\\1/p\' /proc/cpuinfo)' ; break;;
        *) echo "$selection is invalid. Please select from list" ;;
    esac
done

sudo tee /boot/machine.local <<EOF
# Edit this file and reboot the Pi.
# NB Insert the SD card into a workstation and you can edit the file as well

newhostname=$newhostname  # Host for /etc/host
#newhostname=<fixed hostname>  # Or use a different hostname instead
#newhostname=$dynhostname
#
# To enable a wifi network add the following content to a file /boot/wpa_supplicant.conf
# and reboot the Raspiberry Pi
# TODO -- add example here.
#
EOF

cat <<'EOF' | sudo tee /usr/local/sbin/config-hostname > /dev/null
#!/bin/sh

if [ -f /boot/machine.local ] ; then
. /boot/machine.local # dash does not support `source` keyword
oldhostname=$(hostname)
if [ -n "$newhostname" -a "$newhostname" != "$oldhostname" ] ; then
  sudo hostname $newhostname
  echo $newhostname | sudo tee /etc/hostname > /dev/null
  sudo sed -i -re 's/^(..*)'$oldhostname'(.*)$/\1'$newhostname'\2/' /etc/hosts
  sudo invoke-rc.d hostname.sh start
  sudo invoke-rc.d networking force-reload
  sudo invoke-rc.d avahi-daemon force-reload
  sudo /etc/init.d/ssh restart
  logger "Changed hostname to $(hostname) on $interface"
  logger "About to reboot"
  sudo init 6
fi
fi

EOF

sudo tee /usr/local/sbin/config-wifi <<'EOFx' > /dev/null
#!/bin/sh

# Can we even manage the wifi?
if !  wpa_cli status 2> /dev/null ; then
  echo "Cannot configure wifi -- no wifi hardware?"
  exit 0
fi

# Do we have a file with setings?
[ -f /boot/machine.local ] || (echo "No /boot/machine.local settings file found" &&  exit 0)

. /boot/machine.local # dash does not support `source` keyword

# Do we at least have some wifi settings
[ -z "$ssid" ] && exit 0

[ -z "$id_str" ] && id_str=$ssid

network_id=$(wpa_cli list_networks 2> /dev/null| tail -n +3 | grep "$ssid" |cut -f 1)

if [ -z  "$network_id" ] ; then
  maxNetworkId=$(wpa_cli list_networks 2> /dev/null | tail -n +3 | tail -n 1 | cut -f 1)]
  if [ -z  $maxNetworkId ] ; then
    network_id=0
  else
    network_id=$(($maxNetworkID + 1 ))
  fi
else
  wpa_cli remove_network "$network_id" # Don't care if it fails
fi

if [ -n "$interface" ] && ! grep $interface /etc/network/interfaces ; then
  sudo tee -a /etc/network/interfaces <<EOF
allow-hotplug $interface
iface $interface inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface default inet dhcp
EOF
  fi

wpa_cli <<EOF
add_network $network_id
set_network $network_id ssid "$ssid"
set_network $network_id psk "$psk"
set_network $network_id id_str "$id_str"
enable_network $network_id
save_config
quit
EOF
EOFx

sudo chmod +x /usr/local/sbin/config-hostname
sudo chmod +x /usr/local/sbin/config-wifi

sudo sed -i -re '/config-(hostname|wifi)/d;/exit 0/i\
[ -x /usr/local/sbin/config-hostname ] && /usr/local/sbin/config-hostname\
[ -x /usr/local/sbin/config-wifi ] && /usr/local/sbin/config-wifi
' /etc/rc.local

# shellcheck disable=2154
if [[ "pi" -eq "$USER" ]] ; then
    echo "The default account is still named \"$USER\". This should be changed for security reasons"
    if [[ $(ask "Do you wish to rename the $USER user account?[y/N] ") =~ ^[Yy]$ ]] ; then

        read -rp "Please enter the new user name " < /dev/tty

        # Make all these changes under a single sudo session -- must be all done at once
        cat <<'EOF' | sudo bash -s $USER $REPLY $HOME
            for i in /etc/group /etc/passwd /etc/sudoers /etc/shadow ; do
                sed -ri -e '/\b'$1'\b/s/\b'$1'\b/'$2'/g' $i
            done

          if [[ -f /etc/sudoers.d/010_${1}-nopasswd ]] ; then
            # Password setting introduced in 20161018+1
            mv /etc/sudoers.d/010_${1}-nopasswd /etc/sudoers.d/010_${2}-nopasswd
            sed -ri -e '/\b'$1'\b/s/\b'$1'\b/'$2'/g' /etc/sudoers.d/010_$2-nopasswd
          fi

          # Rename home directory
          mv $3 /home/$2
EOF

        USER=$REPLY

        echo "User name changed to $USER"

        echo please change the password as well
        sudo passwd "$USER"   # Don't prompt the user for their own password by using sudo
    else
      echo
    fi
fi


# Enable ssh server (Requried for Raspian after November 2016)
sudo touch /boot/ssh

echo 'Setup complete. Please change the  password for '"$USER"' if not already done'
ask "Please press any key to reboot the Raspberry Pi"
sudo init 6
